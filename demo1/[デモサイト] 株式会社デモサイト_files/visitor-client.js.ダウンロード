if (window.chatplus == undefined) { window.chatplus = {}; }
if (window.chatplusData == undefined) { window.chatplusData = {}; }
var __writeIntervalID = null;
var __readIntervalID = null;
if (window.__cp_d == undefined) { window.__cp_d = ""; }
if (window.jp_chatplus_app_accessTime == undefined) { window.jp_chatplus_app_accessTime = ""; }
if (window.jp_chatplus_parts_accessTime == undefined) { window.jp_chatplus_parts_accessTime = ""; }
var __c_domain = location.protocol + '//' + location.host;

if (window.chatplus.option == undefined) {window.chatplus.option = {}};
window.chatplus.Audio = function(src) {this.src = src; if (this.src) {this.audio = new Audio(this.src);}}
window.chatplus.Audio.prototype = {'play': function() {if (window.chatplus.option.mute !== true && this.src) {this.audio.play(); this.audio = new Audio(this.src);}}};
var AUDIO_LIST = {
	  "audioTypeMessage":	new chatplus.Audio("https://appimg.chatplus.jp/app/s/sound/message.mp3?2")
	, "audioTypeStart":		new chatplus.Audio("https://appimg.chatplus.jp/app/s/sound/start.mp3?2")
	, "audioTypeAlert":		new chatplus.Audio("https://appimg.chatplus.jp/app/s/sound/alert.mp3?2")
	, "audioTypeClose":		new chatplus.Audio("https://appimg.chatplus.jp/app/s/sound/close.mp3?2")
};

window.chatplus._ = window.__.noConflict();

var ___startTime = 0;
var ___access_time = 0;
var ___clFirstMesTime = 0;
var ___clLastMesTime = 0;
var ___agLastMesTime = 0;
var ___cbLastMesTime = 0;
var ___ruleIdTime = 0;
var ___countClsMess = 0;
var ___countAgMess = 0;
var ___continuityAgMess = 0; //連続した担当者発言回数
var ___chatmessages = [];
var ___chatbotData = [];
var ___chatbotDataVisitor = [];
var ___last_message_cl = "";
var ___chatbotrules = {};
var message_last_chatpart = "";
var ag_message_last_chatpart = "";
var bot_message_last_chatpart = "";
var time_credit_temp = 0;
var pingStartTime = -1;
var ping_flag = false;
var close_by_agent_flag = false;
var check_chatbotpart_flag = false;
var check_chatbotpart_not_clmes_flag = false;
var check_chatbotpart_data_temp = [];
var chatbotpart_from = 0;
var check_new_message_flag = false;
var check_count_mess = false;
var config = document.getElementById("chat_config").textContent;
var customer_tags = [];
var customer_origins = {};
var ___match_clMes_checking = false;
var ___match_clMes_local = false;
var ___match_clMes_remove = false;
var __chatPartId = -1;
var showLead = false;

    window.riot = riot;
    chatplus.VisitorClient = function() {
        var self = this;
        var chatData = null;
        var status = null;
        var cpParams = {};
        try {
            cpParams = JSON.parse(decodeURIComponent(window.location.hash.replace(/^#/, '')));
        } catch (e) {};
        var chatbotpartId = null;
        var chatplusUsedChatbots = [];
        var ruleaTemp = [];
        var rulebTemp = [];

        //chatbotパーツ取得
        var data = {
            'key': access_key + '_' + site_id,
            'visitor_id': parseInt(window.__cp_vi) || parseInt(window.va) || null,
            'p': JSON.stringify(jQueryPlus.extend(document.__cp_p, document.__cp_f)),
        };

        jQueryPlus.ajax({
          type:"post"
          , url: __cp_d+"/api/chat/parts"
          , data:data
          , success:function(data){
            if (data.result==1) {
								var flg = false;
                for(var i in data.rules) {
										if(data.rules[i].timer.on == 'leavePage'){
											flg = true;
										}
                    ruleaTemp = data.rules[i].rulea;
                    rulebTemp = data.rules[i].ruleb;
                    ___access_time = data.access_time*1000;
                }
								(window.localStorage)?window.localStorage.setItem('leavePage',flg):__cp_tracker.setCookie('leavePage',flg);
                ___chatbotData = data.rules;
                ___chatbotDataVisitor = data.visitor;
                ___chatbotData = self.sort_chatbotpart(___chatbotData);

                //ruleのみを保持（何回も実行可能処理のため）
                chatplus._.each(___chatbotData, function(c){
                    chatplus._.each(c.action, function(a){
                        if(a.type=="rule") {
                            ___chatbotrules[a.value] = 0;
                        }
                    });
                });
                chatbotpartId = setInterval(self.chatbotpart, 1000, ___chatbotData,data.visitor);
                window.addEventListener('beforeunload', function() {
                    //self.chatbotpart(___chatbotData, data.visitor, true);
                });
            }
          }
        });

        riot.observable(self);

        (function(){
			/////////////////////////////////////////////////
			//pingのパラメータ
			var pingTimerID = null;
			var regularDelay = 2500;//2.5秒
			var slowDelay1 = 10*1000;//10秒
			var slowDelay2 = 25*1000;//25秒
			var slowDelay3 = 60*1000;//60秒 in_chatかin_chatbotのみ
			var delay = regularDelay;
			var pingStartTime = -1;
			var pingChangeTime1 = 5 * 60 * 1000;//5分
			var pingChangeTime2 =15 * 60 * 1000;//15分
			var pingStopTime = 30 * 60 * 1000;//30分
			var pingTimeout = 10 * 1000; // 10秒
			var ping_flag = true;
			var ping_finished = true;
			var ping_never = false;
			////////////////////////////////////////////////
            var data = {};
            var received_agent_writing = false; // 担当者の入力中文字列を受け取ったフラグ

            //開始時間
            ___startTime = new Date().getTime();

            //var me = self;
            self.updateVisitor = function() {
                if (chatplusData["status"]=="no_chat") {
                    close_by_agent_flag = false;
                    if( status == 'greeting' || status == "in_chat" || status == "in_chatbot" )
                        return;

                    status = 'no_chat';
                    self.trigger('noChat', chatplusData);
                    self.clearsession();
                }
                else if (chatplusData["status"]=="close_chat_by_visitor") {
                    status = "close_chat_by_visitor";
                    time_credit_temp = 0;
                    self.clearsession();
                    self.trigger('closeChatByVisitor', chatplusData);
                }
                else if (chatplusData["status"]=="close_chat_by_agent") {
                    status = "close_chat_by_agent";
                    ///////////////////////////////////////////////////////////////
                    //本来はリスナーの中に書くべき?
                    if (!close_by_agent_flag) {
                        //___startTime = new Date().getTime();
                        pingStartTime = new Date().getTime();
                        time_credit_temp = 0;
                        self.clearsession();
                        close_by_agent_flag = true;
                    }
                    ///////////////////////////////////////////////////////////////
                    self.trigger('closeChatByAgent', chatplusData);
                }
                else if (chatplusData["status"]=="close_chat_by_mute") {
                    status = "close_chat_by_mute";
                    self.clearsession();
                    self.trigger('closeChatByMute', chatplusData);
                }
                else if (chatplusData["status"]=="wait_chat") {
                    status = "wait_chat";
                    if (chatplusData["wait"]) {
                        if (chatplusData["wait"]["inChatWaiting"]) {
                            self.addMessages();
                        }
                        if (chatplusData["config"]["appearance"]["calling"]["disable"])
                            chatplusData["wait"]["disable"] = true;
                        self.trigger('waitChat', chatplusData["wait"]);
                    }
                }
                else if (chatplusData["status"]=="post_greeting") {
                    if (status == 'in_chat' || status == 'in_chatbot') {return;}
                    //すでにwindowが開いているときはgreetingをpostしない
                    //var windowStatus = (window.localStorage)?window.localStorage.getItem('windowStatus'):__cp_tracker.getCookie('windowStatus');
                    //if (windowStatus == 'open') {return;}
                    // グリーティングでチャットを開始するので,チャットウィンドウを開く
                    try {
                        (window.localStorage)?window.localStorage.setItem('windowStatus', 'open'):__cp_tracker.setCookie('windowStatus', 'open');
                    } catch (e) {}

                    var data = {
                          agent:chatplusData["agent"]
                        , status: status == "in_chat" ? "in_chat" : "in_chatbot"
                        , chat:[{
                            chat_id:0
                          , body:self.parseVariables(chatplusData["posted_greeting"])
                          , event_from:2
                          , agent_id:chatplusData["agent"]["id"]
                          , name:chatplusData["agent"]["chat_username"]
                          , event_type:22
                          , created_at:(function(d) {return d.getFullYear()+'/'+(d.getMonth()+1)+'/'+d.getDate()+' '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds();})(new Date())
                        }]
                    };

                    ///グリーティングを送信
                    jQueryPlus.ajax({
                        url: __cp_d+"/api/chat/greeting",
                        method: 'POST',
                        data: {
                            key: access_key + '_' + site_id,
                            text:chatplusData["posted_greeting"],
                            rule_id:chatplusData["posted_greeting_id"],
                            visitor_id:chatplusData["customer"]["visitor_id"]
                        }
                    }).done(function(data){
                        if (data.data["messages"]) {
							if (data.data["status"])
								chatplusData["status"] = "in_chatbot";
                            var last = chatplus._.last(data.data["messages"]);
                            if (last) {
                                chatplusData["last_message_id"] = last["id"];
                                // ___cbLastMesTime = new Date().getTime();
                            }
                        }
                    }).fail(function(){});

                    status = 'greeting';
                    self.trigger('postGreeting', data);
                }else if (chatplusData["status"]=="in_chat" || chatplusData["status"]=="in_chatbot") {
                    if (status === 'no_chat' || status === 'wait_chat') {
                        try {
                            (window.localStorage)?window.localStorage.setItem('windowStatus', 'open'):__cp_tracker.setCookie('windowStatus', 'open');
                        } catch (e) {}
                    }

                    //記入中
                    if ( chatplusData["writing"] ) {
                        jQueryPlus("#writing_box").show();

                        if (jQueryPlus('#chatplusview .view')[0] && ! received_agent_writing) {
                            received_agent_writing = true;

                            // jQueryPlus('#messages').animate({scrollTop: jQueryPlus('.view')[0].scrollHeight}, 'fast');
                            // #messagesが上に500px以上手動スクロールされてなければ,最下部にスクロール
                            var $parent = jQueryPlus('#messages');
                            var parent = $parent[0];
                            var view = jQueryPlus('#chatplusview .view')[0];
                            if (parent === void(0)) {return;}
                            if (view.scrollHeight - (parent.scrollTop + parent.clientHeight) < 500) {
                                $parent.animate({scrollTop: 1000000}, 'fast');
                            }
                        }
                    } else {
                        received_agent_writing = false;
                        jQueryPlus("#writing_box").hide();
                    }

                    //メッセージ追加
                    self.addMessages();

                    // 直前のステータスと変化がなければ何もしない
                    if (status === chatplusData['status']) {
                        return;
                    } else {
                        // no_chatからin_chat[bot]になったなら開始を通知
                        if (status == "no_chat") {
                            AUDIO_LIST["audioTypeStart"].play();
                        }

                        // ステータス更新
                        status = chatplusData["status"];
                        self.trigger('inChat', chatplusData);

                        // pingが止まっていたら再開
                        pingStartTime = new Date().getTime();
                        self.pingReset();
                    }
                }else if (chatplusData["status"]=="no_agent") {
                    status = 'no_agent';
                    self.trigger('noAgent', chatplusData);
                }else if (chatplusData["status"]=="quit") {
                    status = "close_chat_by_visitor";
                    self.trigger('closeChatByVisitor', chatplusData);
                }
            };

            self.addMessages = function() {
                if (chatplusData["messages"] && chatplusData["messages"].length) {
                    pingStartTime = new Date().getTime();

                    self.pingReset();
                    var messages = chatplus._.filter(chatplusData["messages"], function(e) {return e['event_type'] != 23 && e['event_type'] != 33;});

                    var soundFlg = false;
                    chatplus._.each(messages, function(message){
                        //同じメッセージが2回表示されることがあるため、最終ID以前のIDを持つメッセージは表示しない
                        var last_id = chatplusData["last_message_id"] ? parseInt(chatplusData["last_message_id"], 10) : -1;
                        var current_id = message["id"] ? parseInt(message["id"], 10) : -1;
                        if (message["event_from"]==1 && ___clFirstMesTime == 0) {
                            if (message["event_type"] == 21) {
                                ___clFirstMesTime = new Date().getTime();
                            }
                            // chatplusData["clFirstMesTime"] = ___clFirstMesTime;
                        }
                        if (last_id < current_id) {
                            var event_trigger = '';
                            if (message["event_from"]==1) {
                                if (message["event_type"] == 21) {
                                    ___clLastMesTime = new Date().getTime();
                                    if (message_last_chatpart === "") {
                                        message_last_chatpart = message["body"];
                                        if (ruleaTemp && ruleaTemp.length > 0) {
                                            // self.check_chatbotpart(ruleaTemp,chatplusData);
                                            check_new_message_flag = true;
                                        }
                                    }
                                    if (message_last_chatpart.indexOf("<clientmess>") !== -1) {
                                        message_last_chatpart = message_last_chatpart.replace(/<clientmess>/g, "").replace(/<\/clientmess>/g, "");
                                    }
                                }
                                // chatplusData["clLastMesTime"] = ___clLastMesTime;
                            }
                            //担当者の発言
                            else if (message["event_type"] == 21) {
                                ___agLastMesTime = new Date().getTime();
                                event_trigger = message.body;
                                ag_message_last_chatpart = message.body;
                                bot_message_last_chatpart = "";
                                if (event_trigger.indexOf("<input"))
                                    event_trigger = event_trigger.substr(0, event_trigger.indexOf("<input"));
                                event_trigger = new RegExp(/<span class="event-trigger">.*<\/span>/).exec(event_trigger);
                                event_trigger = event_trigger ? event_trigger[0] : null;
                                if (event_trigger) {
                                    events = event_trigger.substr(event_trigger.indexOf("#!!") + 3)
                                    events = events.substr(0, events.indexOf("<"));
                                    if (events)
                                        self.trigger('sendEvent', {events:events});
                                }
                            }
                            //チャットボットの発言
                            else if (message["event_type"] == 22) {
                                ___cbLastMesTime = new Date().getTime();
                                event_trigger = message.body;
                                bot_message_last_chatpart = message.body;
                                ag_message_last_chatpart = "";
                                if (event_trigger.indexOf("<input"))
                                    event_trigger = event_trigger.substr(0, event_trigger.indexOf("<input"));
                                event_trigger = new RegExp(/<span class="event-trigger">.*<\/span>/).exec(event_trigger);
                                event_trigger = event_trigger ? event_trigger[0] : null;
                                if (event_trigger) {
                                    events = event_trigger.substr(event_trigger.indexOf("#!!") + 3)
                                    events = events.substr(0, events.indexOf("<"));
                                    if (events)
                                        self.trigger('sendEvent', {events:events});
                                }
                                // chatplusData["cbLastMesTime"] = ___cbLastMesTime;
                            }
                            if (message["event_from"]==2 && message['body'] != event_trigger)
                                soundFlg = true;

                            self.trigger('receiveMessage', message);
                        }
                    });

                    if (soundFlg) {
                        AUDIO_LIST["audioTypeMessage"].play();
                    }
                    if (chatplusData["messages"].length) jQueryPlus("#writing_box").hide();
                }

                if (chatplusData["messages"]) {
                    var last = chatplus._.last(chatplusData["messages"]);
                    if (last)
                        chatplusData["last_message_id"] = last["id"];
                }
            }

            //self._ping = chatplus._.debounce(function(){
			self._ping = function() {
                if (pingStartTime < 0)
                    pingStartTime = ___startTime;
                var now = new Date().getTime() - pingStartTime;
                if (status === "no_chat" || status === "no_agent" || status === "in_chat" || status === "in_chatbot"
                    || status.lastIndexOf("close_chat") !== -1) {
					if (delay === regularDelay && pingChangeTime1 < now) {
						delay = slowDelay1;
					} else if (delay === slowDelay1 && pingChangeTime2 < now) {
						delay = slowDelay2;
					} else if (pingStopTime < now) {
                        if(status !== "in_chat" && status !== "in_chatbot"){
						    ping_flag = false;
						    return;
                        } else{
                            delay = slowDelay3;
                        }
					}
                }

                if (ping_finished) {
                ping_finished = false;
                //var me = this;
                var data = { key: access_key + '_' + site_id
                    , last_message_id:chatplusData["last_message_id"]
                    , visitor_id:chatplusData["customer"]["visitor_id"]
                    , chat_id: chatplusData['origin_chat_id']
                    , status: chatplusData["status"]
                };
                if (chatplusData['wait'] && chatplusData['wait']['inChatWaiting']) {data['inChatWaiting'] = chatplusData['inChatWaiting'];}

                jQueryPlus.ajax({
                      type:"post"
                    , url:__cp_d+"/api/chat/ping"
                    , data:data
                    , timeout: pingTimeout
                    , error:function(xhr, textStatus, errorThrown){
                        window.console.error('ping', textStatus);
                        ping_finished = true;
                    }
                    , success:function(data){
                        ping_finished = true;

                        if (data.result==1) {
                            if (data.data['chat_id'] == chatplusData['origin_chat_id']) {
                                chatplusData["status"] = data.data["status"];
                            }
                            if (data.data["display_when_restart"]) {
                                chatplus["display_when_restart"] = data.data["display_when_restart"];
                                chatplusData["display_when_restart"] = data.data["display_when_restart"];
                            }
                            if (data.data["agent"]) {chatplusData["agent"] = data.data["agent"];}
                            chatplusData["writing"] = data.data["writing"];
                            chatplusData["messages"] = data.data["messages"];
                            chatplusData["wait"] = data.data["wait"];
                            if (chatplusData["status"] == "wait_chat" && data.data["select"]) {
                                chatplusData["wait"]["select"] = true;
                            }
                            if (data.data["inChatWaiting"]) {
                                chatplusData["wait"]['inChatWaiting'] = true;
                            }
                            chatplusData["chat_id"] = data.data["chat_id"];

                            if (chatplus._.isArray(data.data["messages"])) {
                                var last = chatplus._.last(___chatmessages);
                                for(var c=0; c<data.data["messages"].length; c++) {
                                    if( last && last["id"]<data.data["messages"][c]["id"] )
                                        ___chatmessages.push( data.data["messages"][c] );
                                    if (last == undefined) {
                                        ___chatmessages.push( data.data["messages"][c] );
                                    }
                                }
                            }
                            if (___chatmessages.length > 0) {
                                ___countClsMess = 0;
                                ___countAgMess = 0;
                                chatplus._.each(___chatmessages, function(message){
                                    if (message["event_from"] == 1) {
                                        if (message["event_type"] == 21) {
                                            ___countClsMess++;
                                        }
					___continuityAgMess = 0;
                                    } else if (message["event_type"] == 21) {
                                        ___countAgMess++;
					___continuityAgMess = 0;
                                    } else if (message["event_type"] >= 22 && message["event_type"] <= 29) {
					___continuityAgMess++;
				    }
                                });
                                //10回連続で担当者発言があったら、チャットボット処理は一旦停止する
                                if (___continuityAgMess>=100)
                                	self.clearsession();

                                check_count_mess = true;
                            }
				            self.updateVisitor();
                        }
                    }
                });
                }
                pingTimerID = setTimeout(self._ping, delay);
            //}, delay);
			};

        self.clearsession = function() {
            message_last_chatpart = "";
            ag_message_last_chatpart = "";
            bot_message_last_chatpart = "";
            ___clFirstMesTime = 0;
            ___clLastMesTime = 0;
            ___agLastMesTime = 0;
            ___cbLastMesTime = 0;
            ___ruleIdTime = 0;
            ___countClsMess = 0;
            ___countAgMess = 0;
            ___chatmessages = [];
            check_chatbotpart_flag = false;
            check_new_message_flag = false;
            chatplusUsedChatbotsRules = [];
        };

        self.check_chatbotpart = function(rules, userData, clMesCheck) {
            rule_check = false;
            var clMes_flag = false;
            var matchCount = 0;
            var partstatus = userData["status"];
            if (rules.length > 0) {
                for(var i in rules) {
                    if (rules[i][2] === 'rmStatus') {
                        check = false;
                        switch( rules[i][4] ) {
                            case "訪問中":
                            if( "no_chat" == partstatus ) {
                                check = true;
                                break;
                            }
                            break;
                            case "チャット中":
                            if( "in_chat" == partstatus ) {
                                check = true;
                                break;
                            }
                            break;
                            case "チャットボット":
                            if( "in_chatbot" == partstatus ) {
                                check = true;
                                break;
                            }
                            break;
                            case "休止中":
                            if( "suspend_chat" == partstatus ) {
                                check = true;
                                break;
                            }
                            break;
                            case "終了":
                            if( "close_chat_by_visitor" == partstatus ) {
                                check = true;
                                break;
                            }
                            break;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;

                    }
                    else if (rules[i][2] === 'clTag') {
                        check = false;
                        if (!customer_tags)
                            continue;

                        var tagchecks = [];
                        for (var j in customer_tags) {
                            var tag = customer_tags[j];
                            switch( rules[i][3]  ) {
                                case "一致する":
                                case "=":
                                    if( tag == rules[i][4] ) {
                                        check = true;
                                    }
                                    break;
                                case "一致しない":
                                case "!=":
                                    if( tag != rules[i][4] ) {
                                        tagchecks.push(true);
                                    }else {
                                        tagchecks.push(false);
                                    }
                                    break;
                                case "含む":
                                case "in":
                                    if( tag.indexOf(rules[i][4]) !== -1 ) {
                                        check = true;
                                        break;
                                    }
                                    break;
                                case "含まない":
                                case "out":
                                    if( tag.indexOf(rules[i][4]) === -1 ) {
                                        tagchecks.push(true);
                                    }else {
                                        tagchecks.push(false);
                                    }
                                    break;
                            }
                        }
                        if(!check && tagchecks.length) {
                            var tagng = false;
                            for (var tindex in tagchecks) {
                                if (!tagchecks[tindex]) {
                                    tagng = true;
                                    break;
                                }
                            }
                            if (!tagng) check = true;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;
                    }
                    else if (rules[i][2] === 'clMes' && clMesCheck) {
                        check = false;
                        rule_mess_check = false;
                        var clMes = message_last_chatpart;
                        switch( rules[i][3]  ) {
                            case "一致する":
                            case "=":
                            if( clMes == rules[i][4] ) {
                                check = true;
                                break;
                            }
                            break;
                            case "一致しない":
                            case "!=":
                            if( clMes != rules[i][4] ) {
                                check = true;
                                break;
                            }
                            break;
                            case "含む":
                            case "in":
                            if( clMes && clMes.indexOf(rules[i][4]) !== -1 ) {
                                check = true;
                                break;
                            }
                            break;
                            case "含まない":
                            case "out":
                            if( clMes && clMes.indexOf(rules[i][4]) === -1 ) {
                                check = true;
                                break;
                            }
                            break;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;
                        clMes_flag = check;
                    }
                    else if (rules[i][2] === 'agMes') {
                        check = false;
                        var agMes = ag_message_last_chatpart;
                        switch( rules[i][3]  ) {
                            case "=":
                                if( agMes == rules[i][4] ) {
                                    check = true;
                                    break;
                                }
                                break;
                            case "!=":
                                if( agMes != rules[i][4] ) {
                                    check = true;
                                    break;
                                }
                                break;
                            case "in":
                                if( agMes && agMes.indexOf(rules[i][4]) !== -1 ) {
                                    check = true;
                                    break;
                                }
                                break;
                            case "out":
                                if( agMes && agMes.indexOf(rules[i][4]) === -1 ) {
                                    check = true;
                                    break;
                                }
                                break;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;
                    }
                    else if (rules[i][2] === 'botMes') {
                        check = false;
                        var botMes = bot_message_last_chatpart;
                        switch( rules[i][3]  ) {
                            case "=":
                                if( botMes == rules[i][4] ) {
                                    check = true;
                                    break;
                                }
                                break;
                            case "!=":
                                if( botMes != rules[i][4] ) {
                                    check = true;
                                    break;
                                }
                                break;
                            case "in":
                                if( botMes && botMes.indexOf(rules[i][4]) !== -1 ) {
                                    check = true;
                                    break;
                                }
                                break;
                            case "out":
                                if( botMes && botMes.indexOf(rules[i][4]) === -1 ) {
                                    check = true;
                                    break;
                                }
                                break;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;
                    }
                    else if (rules[i][2] === 'clStart') {
                        check = false;
                        clStart = ___countClsMess;
                        switch( rules[i][3] ) {
                            case "true":
                            if( clStart >= 1 ) {
                                check = true;
                                break;
                            }
                            break;
                            case "false":
                            if( clStart < 1 ) {
                                check = true;
                                break;
                            }
                            break;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;

                    }
                    else if (rules[i][2] === 'agStart') {
                        check = false;
                        agStart = ___countAgMess;
                        switch( rules[i][3] ) {
                            case "true":
                            if( agStart >= 1 ) {
                                check = true;
                                break;
                            }
                            break;
                            case "false":
                            if( agStart < 1 ) {
                                check = true;
                                break;
                            }
                            break;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;

                    }
                    else if (rules[i][2] === 'wait') {
                        check = false;
                        if( partstatus == "wait_chat" ) {
                            check = true;
                        }
                        if (clMesCheck && rules[i][1] == "or" && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount > 0 && !check) {continue;}
                        else if (!clMesCheck && rules[i][1] == "or" && matchCount == 0 && !check) {check = true;}
                        else if (rules[i][1] == "and" && matchCount > 0 && !rule_check) {continue;}
                        rule_check = check;
                        matchCount++;
                    }
                }
            }
            if (clMesCheck) {
                ___match_clMes_local = rule_check && clMes_flag;
                check_chatbotpart_flag = rule_check;
            } else {
                check_chatbotpart_not_clmes_flag = rule_check;
                chatbotpart_from = chatbotpart_from + matchCount;
            }
            
        }
        self.chatbotpart = function(chatbotData, userData, on_leavepage) {
            //console.log( chatbotData );
                //chatbot(開始)
                for(var i in chatbotData) {
                    var config = chatbotData[i];
                    // console.log("config chatbot");

                    var action_a_flag = true;
                    var action_b_flag = true;
                    var action_timer_flag = false;
                    var usedChatBot = true;
                    var rule_mess_check = false;

                    /******************************************* 1.設定内容 *******************************************/
                    //■timer起動条件
                    var timer = config.timer;
                    //■rule条件
                    var rulea = config.rulea;
                    var ruleb = config.ruleb;
                    //■actions
                    var action = config.action;

                    /*******************************************
                      2.設定内容による条件判定
                    *******************************************/
                    //rule条件判定
                    var ruleaRule = "";
                    for(var a in rulea) {

                      ruleaRule = rulea[a][2];

                      if (userData && (rulea[a][2] === 'wait'
                        || rulea[a][2] === 'clMes' || rulea[a][2] === 'agMes' || rulea[a][2] === 'botMes' || rulea[a][2] === 'clTag')) {
                        self.check_chatbotpart(rulea,chatplusData,true);
                        // console.log("rule a " + check_chatbotpart_flag );
                        action_a_flag = check_chatbotpart_flag;
                        if (action_a_flag && rulea[a][2] === 'clMes') {
                            rule_mess_check = true;
                            ___match_clMes_local = true;
                            ___match_clMes_checking = false;
                        }
                      } else if (rulea[a][2] == 'clUnexpMes') {
                        if (___match_clMes_checking && !___match_clMes_local) {
                          rule_mess_check = true;
                          action_a_flag = true;
                          check_chatbotpart_flag = true;
                        } else {
                          action_a_flag = false;
                          check_chatbotpart_flag = false;
                        }
                      }
                    }

                    //rule条件(ruleb)
                    for(var b in ruleb) {
                      if (userData && (ruleb[b][2] === 'rmStatus'
                        || ruleb[b][2] === 'clStart' || ruleb[b][2] === 'agStart')) {
                        self.check_chatbotpart(ruleb,chatplusData,true);
                        // console.log( "rule b" + check_chatbotpart_flag );
                        action_b_flag = check_chatbotpart_flag;
                      }
                    }
                    //起動条件
                    if (on_leavepage) {
                        action_timer_flag = (timer && timer.on == 'leavePage');
                    } else if (timer) {
                        var now = new Date().getTime();
                        //ページ表示してからの経過時間
                        var elapsed = now  - ___startTime;
                        if(timer.on == "openPage" && timer.sec * 1000 < elapsed) action_timer_flag = true;
                        if(timer.on == "openSite" && timer.sec * 1000 < ___access_time+elapsed) action_timer_flag = true;
                        if(timer.on == "clFirstMes" && ___clFirstMesTime !== 0 && timer.sec * 1000 < now - ___clFirstMesTime) action_timer_flag = true;
                        if(timer.on == "clLastMes" && ___clLastMesTime !== 0 && timer.sec * 1000 < now - ___clLastMesTime) action_timer_flag = true;
                        if(timer.on == "agLastMes" && ___agLastMesTime !== 0 && timer.sec * 1000 < now - ___agLastMesTime) action_timer_flag = true;
                        if(timer.on == "cbLastMes" && ___cbLastMesTime !== 0 && timer.sec * 1000 < now - ___cbLastMesTime) action_timer_flag = true;
                        if(timer.on == "rule" && ___ruleIdTime !== 0 && timer.sec * 1000 < now - ___ruleIdTime) action_timer_flag = true;
                        if (timer.on == 'none') {action_timer_flag = true;}
                        if (timer.on == 'leavePage') {action_timer_flag = false;}
                    } else {
                        action_timer_flag = true;
                    }

                    /*
                    if (check_new_message_flag) {
                        usedChatBot = false;
                    } else if (jQueryPlus.inArray(config.id,chatplusUsedChatbots)==-1) {
                        usedChatBot = false;
                    }
                    */
                    if (jQueryPlus.inArray(config.id,chatplusUsedChatbots)==-1) {
                        usedChatBot = false;
                    }

                    /*******************************************
                     3.rulea,ruleb,起動条件のすべてが条件一致した場合
                     actionの処理を実行する
                    *******************************************/
                    if (action_timer_flag && action_a_flag && action_b_flag && !usedChatBot) {
                        /*
                        var chatbotUsed = true;
                        for(var cbr in ___chatbotrules) {
                            if (cbr==config.id) {
                                chatbotUsed = false;
                                ___ruleIdTime = 0;
                                ___chatbotrules[cbr] = ___chatbotrules[cbr]+1;
                            }
                        }
                        if (chatbotUsed)
                            chatplusUsedChatbots.push(config.id);
                        */

                        //複数回実行できるように修正
                        if( ruleaRule === 'agMes' || ruleaRule === 'botMes' ) {
                            rule_mess_check = true;
                        }
                        if (!rule_mess_check )
                            chatplusUsedChatbots.push(config.id);

                        var current_message = message_last_chatpart;

                        check_new_message_flag = false;
                        message_last_chatpart = "";
                        ag_message_last_chatpart = "";
                        bot_message_last_chatpart = "";
                        //action内のチャットカウント数
                        var chatmessages = [];
                        var ruleIds = [];
                        var ruleEvent = "";
                        var actionIndex = 0;
                        var pad_left = function(x, ch, digit){
                            if ('padStart' in String.prototype) {return x.toString().padStart(digit, ch);}
                            var s = '';
                            for (var i = 0; i < digit; i++) {s += ch;}
                            s += x.toString();
                            return s.substr(-1 * digit);
                        };
                        //複数のactionを実行する
                        for(var p in action) {
                            actionIndex++;
                            var ruleId = "2_"+pad_left(config.id, '0', 6)+"_"+pad_left(actionIndex, '0', 2);
                            if ( chatplus._.indexOf(["text","text_select","stamp","imagemap","textform","confirm","randomchat","file"], action[p].type)==-1 ) {

                                jQueryPlus.ajax({
                                    url: __cp_d + "/api/chat/eventlog",
                                    method: 'POST',
                                    data: {
                                        key: access_key + '_' + site_id,
                                        rule_id: ruleId,
                                        num: null,
                                        visitor_id: chatplusData["customer"]["visitor_id"]
                                    }
                                }).done(function (result) {
                                }).fail(function () {
                                });

                                if (action[p].type == "url") {
                                    if (typeof action[p].same_tab == 'undefined') {
                                        self.trigger('jumpPage', {
                                            URL: action[p].value,
                                            same_tab: false
                                        });
                                    } else {
                                        self.trigger('jumpPage', {
                                            URL: action[p].value,
                                            same_tab: action[p].same_tab
                                        });
                                    }
                                }
                                else if (action[p].type == "code") {
                                    var code = action[p].value;
                                    try {
                                        code = self.parseVariables(code);
                                        eval(code);
                                    } catch (e) {
                                        console.log("chatplus script error", e);
                                    }
                                }
                                else if (action[p].type == "rule") {
                                    ruleIds.push(action[p].value);
                                }
                                else if (action[p].type == "attrvisitor") {
                                    try {
                                        var values = action[p].value.split("_");
                                        var attr = {};
                                        attr[values[0]] = values[1];
                                        var visitor_id = chatplusData.customer.visitor_id;

                                        ChatplusAction.addVisitorAttribute(access_key, site_id, visitor_id, attr, function (e) {
                                        });
                                    } catch (e) {
                                        console.error(e);
                                    }
                                }
                                else if (action[p].type == "tagvisitor") {
                                    try {
                                        var visitor_id = chatplusData.customer.visitor_id;
                                        ChatplusAction.addVisitorTag(access_key, site_id, visitor_id, [action[p].value], function (e) {
                                        });
                                    } catch (e) {
                                        console.error(e);
                                    }
                                }
                                else if (action[p].type == "tagagent") {
                                    try {
                                        ChatplusAction.addAgentTag(access_key, site_id, chatplusData.agent.id, [action[p].value], function (e) {
                                        });
                                    } catch (e) {
                                        console.error(e);
                                    }
                                }
                                else if (action[p].type == "tagchat") {
                                    try {
                                        ChatplusAction.addChatTag(access_key, site_id, chatplusData.chat_id, [action[p].value], function (e) {
                                        });
                                    } catch (e) {
                                        console.error(e);
                                    }
                                }
                                else if (action[p].type == "status") {
                                    self.trigger("changeStatus", {status: action[p].value});
                                }
                                else if (action[p].type == "assign") {
                                    var value = action[p].value.split("_");
                                    self.trigger("changeAgent", {
                                        mode: value[0],
                                        target: value[1],
                                        status: 'in_chat'
                                    });
                                }
                                else if (action[p].type == "trigger") {
                                    var events = self.parseVariables(action[p].value);
                                    if (events.indexOf("#!!") === 0)
                                        self.trigger("sendEvent", {events: events.substr(3)});
                                }
                            }else {
                                time_credit_temp = (time_credit_temp >= 0) ? time_credit_temp : 0;
                                if( ruleaRule === 'agMes') {
                                    ruleEvent = "agent";
                                }
                                if (action[p].type == 'similar') {
                                    action[p].greeting = current_message;
                                }
                                chatmessages.push(action[p]);
                            }
                        }

                        if (chatmessages.length) {
                            if (status != 'in_chat' && status != 'in_chatbot') {

                                //担当者がいない場合は、greetingを表示しない
                                if (!chatplusData["agent"])
                                    return;

                                //待ち中はグリーティングは表示しない
                                if( chatplusData["status"] == "wait_chat")
                                    return;

                                // グリーティングでチャットを開始するので,チャットウィンドウを開く
                                try {
                                    (window.localStorage)?window.localStorage.setItem('windowStatus', 'open'):__cp_tracker.setCookie('windowStatus', 'open');
                                } catch (e) {}
                            }
                            ///グリーティングを送信
                            jQueryPlus.ajax({
                                url: __cp_d+"/api/chat/greetingparts",
                                method: 'POST',
                                data: {
                                    key: access_key + '_' + site_id,
                                    text:JSON.stringify(chatmessages),
                                    visitor_id:userData,
                                    agent_id: chatplusData['agent'] ? chatplusData['agent']['id'] : null,
                                    timer:timer.sec,
                                    rule_id: ruleId,
                                    rule_event: ruleEvent,
                                    time_credit: time_credit_temp
                                }
                            }).done(function(data){
                                if (rule_mess_check) {message_last_chatpart = "";}
                                if (data.data)
                                    time_credit_temp = data.data.time_credit;
                            }).fail(function(){});
                        }
                        if (ruleIds.length) {
                            ///ルール取得
                            jQueryPlus.ajax({
                                url: __cp_d+"/api/chat/ruleparts",
                                method: 'POST',
                                data: {
                                    key: access_key + '_' + site_id,
                                    ids:JSON.stringify(ruleIds),
                                    visitor_id:userData,
                                    chat_id: chatplusData['chat_id'],
                                    timer:timer.sec,
                                    time_credit: time_credit_temp,
                                }
                            }).done(function(data){
                                if (data.result) {
                                    if( chatplus._.isArray(data.data.rules) ) {
                                        chatplus._.each(chatbotData, function(chatbot) {
                                            chatplus._.each(data.data.rules, function(rule) {
                                                if (rule.timer.on == "ruleId") {
                                                    rule.timer.on = "rule";
                                                    rule.id = rule.id + "_" + new Date().getTime();
                                                    chatbotData.push(rule);
                                                }
                                            });
                                            ___ruleIdTime = new Date().getTime();
                                            clearInterval(chatbotpartId);
                                            chatbotData = self.sort_chatbotpart(chatbotData);
                                            chatbotpartId = setInterval(self.chatbotpart, 1000, chatbotData, data.data.visitor);
                                        });
                                    }
                                }
                            }).fail(function(){});
                        }
                        //利用ログを保存
                        jQueryPlus.ajax({
                            url: __cp_d+"/api/chat/use_chatbotpart",
                            method: 'POST',
                            data: {
                                key: access_key + '_' + site_id,
                                part_id:config.id,
                                visitor_id:userData
                            }
                        }).done(function(data){
                        }).fail(function(){});

                        if( chatplusUsedChatbots.length==chatbotData.length) {
                            clearInterval( chatbotpartId );
                            break;
                        }
                    }//chatbot(終了)
                }

            ___match_clMes_checking = false;
            ___match_clMes_local = false;
        }
        
        self.chatbotpart_ClMes = function(chatbotData, userData) {

                //chatbot(開始)
                for(var i in chatbotData) {
                    var config = chatbotData[i];
                    __chatPartId = config.id;
                    // console.log("config chatbot");

                    var action_a_flag = true;
                    var action_b_flag = true;
                    var action_timer_flag = false;

                    /******************************************* 1.設定内容 *******************************************/
                    //■timer起動条件
                    var timer = config.timer;
                    //■rule条件
                    var rulea = config.rulea? config.rulea : [];
                    var ruleb = config.ruleb? config.ruleb : [];
                    //■actions
                    var action = config.action;
                    //起動条件
                    if (timer) {
                        if (timer.on == "none")  action_timer_flag = true;
                    }else{
                        action_timer_flag = true;
                    }

                    if (action_timer_flag) {
                        /*******************************************
                        2.設定内容による条件判定
                        *******************************************/
                        chatbotpart_from = 0;

                        if (userData && rulea.length > 0) {
                            for (var a in rulea) {
                                if (rulea[a][2] === 'wait' || rulea[a][2] === 'agMes' || rulea[a][2] === 'botMes' || rulea[a][2] === 'clTag') {
                                    self.check_chatbotpart(rulea,chatplusData,false);
                                    action_a_flag = check_chatbotpart_not_clmes_flag;
                                }
                            }
                        }

                        if (userData && ruleb.length > 0) {
                            for (var b in ruleb) {
                                if (ruleb[b][2] === 'rmStatus' || ruleb[b][2] === 'clStart' || ruleb[b][2] === 'agStart') {
                                    self.check_chatbotpart(ruleb,chatplusData,false);
                                    action_b_flag = check_chatbotpart_not_clmes_flag;
                                }
                            }
                        }

                        /*******************************************
                        3.rulea,ruleb,起動条件のすべてが条件一致した場合
                        actionの処理を実行する
                        *******************************************/
                        var chat_part_data = {};
                        chat_part_data[__chatPartId] = 0;
                        chat_part_data["i"] = chatbotpart_from;
                        if (action_a_flag && action_b_flag) {
                         chat_part_data[__chatPartId] = 1;
                        }

                        if (JSON.stringify(check_chatbotpart_data_temp).indexOf(JSON.stringify(chat_part_data))==-1) {
                         check_chatbotpart_data_temp.push(chat_part_data);
                        }
                    }

                    
                }
        }

        self.sort_chatbotpart = function(chatbotData) {
            var nonmatchs = [];
            var others = [];

            for (var i in chatbotData) {
                var chatbot = chatbotData[i];
                var rulea = chatbot["rulea"];

                var nonmatch_flag = false;
                if (rulea) {
                    for (var a in rulea) {
                        if (rulea[a][2] == 'clUnexpMes') {
                            nonmatch_flag = true;
                            break;
                        }
                    }
                }

                if (nonmatch_flag)
                    nonmatchs.push(chatbot);
                else
                    others.push(chatbot);
            }

            for (var i in nonmatchs)
                others.push(nonmatchs[i]);

            return others;
        }

            //ポーリングが止まっている場合に限り、再開する + pingの間隔を元に戻す 関数
            self.pingReset = function() {
				if (ping_never)
					return;
				if (delay !== regularDelay) {
					delay = regularDelay;
					clearTimeout(pingTimerID);
					self._ping();
				}
                if (!ping_flag) {
                    ping_flag = true;
                    self._ping();
                }
            };

		self.parseVariables = function(text) {
			if (!text || !text.match(/___[^_]+___/)) return text;

			text = text.replace(/___date___/g, new Date());
			text = text.replace(/___url___/g, location.href);
			if (chatplusData["status"]) {
				text = text.replace(/___status___/g, chatplusData["status"]);
			}

			if (chatplusData["customer"]) {
				var clStrs = text.match(/___cl\.[^_]+___/g);
				if (clStrs) {
					clStrs = chatplus._.uniq(clStrs);
					chatplus._.each(clStrs, function(clStr) {
						var s = clStr.substr(6, clStr.length-9);
						s = s.replace(/[A-Z]/g, function(c) {return '_'+c.charAt(0).toLowerCase();});
						if (s === "tags") {
							var newStr = customer_tags ? customer_tags.join(",") : "";
							text = text.replace(new RegExp(clStr, 'g'), newStr);
						} else if (s.indexOf("*") === 0) {
							s = s.substr(1);
							if (customer_origins.hasOwnProperty(s))
								text = text.replace(new RegExp(clStr, 'g'), customer_origins[s]);
						} else if (chatplusData["customer"].hasOwnProperty(s)) {
							text = text.replace(new RegExp(clStr, 'g'), chatplusData["customer"][s]);
						}
					});
				}
			}

			if (chatplusData["agent"]) {
				var agStrs = text.match(/___ag\.[^_]+___/g);
				if (agStrs) {
					agStrs = chatplus._.uniq(agStrs);
					chatplus._.each(agStrs, function(agStr) {
						var s = agStr.substr(6, agStr.length-9);
						s = s.replace(/[A-Z]/g, function(c) {return '_'+c.charAt(0).toLowerCase();});
						var newStr = "";
						if (chatplusData["agent"].hasOwnProperty(s)) {
							text = text.replace(new RegExp(agStr, 'g'), chatplusData["agent"][s]);
						}
					});
				}
			}

			return text;
		};

            // initialize
        var ppf=document.__cp_f;
        var ppp=document.__cp_p;
        var pp = JSON.stringify(jQueryPlus.extend(ppp, ppf));
            jQueryPlus.ajax({
                url: __cp_d+"/api/chat/initialize",
                method: 'POST',
                data: {
                      key: access_key + '_' + site_id
                    , visitor_id:va
                    , p:pp
                }
            })
            .done(function(data){
                if (data.result==1) {
                    chatplusData = data.data;
					chatplusData['origin_chat_id'] = chatplusData['chat_id'];

					if (chatplusData["customer"]["custom_fields"]) {
						var custom_fields = JSON.parse(chatplusData["customer"]["custom_fields"]);
						var tags = custom_fields[0];
						var array;
						if (tags && tags.hasOwnProperty("_tags")) {
							customer_tags = tags["_tags"];
							array = custom_fields.slice(1, custom_fields.length);
						} else {
							array = custom_fields.slice(0, custom_fields.length);
						}
						customer_origins = array.reduce(function(obj, item) {
							return chatplus._.extend(obj, item);
						}, {});
					}

					if (data.data["wait"]) {
						if (data.data["inChatWaiting"]) {
							chatplusData["wait"]["inChatWaiting"] = true;
						}
					}

					chatplusData["config"] = config;
					if (config.appearance && config.appearance.sounds) {
						var sounds = {
							'start': config.appearance.sounds.start ? 'https://appimg.chatplus.jp/app/s/sound/' + config.appearance.sounds.start : null,
							'receive': config.appearance.sounds.receive ? 'https://appimg.chatplus.jp/app/s/sound/' + config.appearance.sounds.receive : null,
						};
						AUDIO_LIST['audioTypeStart']	= new chatplus.Audio(sounds.start);
						AUDIO_LIST['audioTypeMessage']	= new chatplus.Audio(sounds.receive);
					}

					if (data.data["congestion"]) {
						// chatplusData["wait"]["congestion"] = true;
						ping_flag = false;
						ping_never = true;
						time_credit_temp = 0;
						self.clearsession();
						self.updateVisitor();
						return;
					}

					chatplusData["past_chat_id"] = data.data["past_chat_id"]
							? data.data["past_chat_id"] : 0;
					chatplusData["past_message_first"] = data.data["past_message_first"]
							? data.data["past_message_first"] : 0;
					chatplusData["past_message_id"] = 0;

                    var messages = chatplus._.filter(data.data['messages'], function(e) {
                        return e['event_type'] != 23 && e['event_type'] != 33;
                    });
                    ___chatmessages = messages;
                    chatplusData["messages"] = [];
                    if (data.data['no_prompt'] || data.data['no_bot_prompt']) { self.trigger('updatePrompt', data.data); }
                    //me.updateVisitor();
                    self.updateVisitor();

                    if (messages && messages.length && data.data["status"]!="no_chat") {
                        var last = chatplus._.last(messages);
                        if (last)
                            chatplusData["last_message_id"] = last["id"];

                        self.trigger('listMessages', {data:messages});
                    }


                    var windowStatus = "open";
                    try {
                        windowStatus = (localStorage)?localStorage.getItem("windowStatus"):__cp_tracker.getCookie("windowStatus");
                    }catch(e){}

                    // 自動話しかけ処理
                    if (chatplusData["greeting"]) {
                        var intervalID = window.setInterval(function(p){
                            // ページ表示からの経過時間を取得
                            var past = parseInt((new Date().getTime() - p.accessTime) / 1000);

                            //別処理でgreetingの中身を削除する処理が追加されたので、再度greetingがあるかチェックする
                            if (!chatplusData["greeting"]) {clearInterval(intervalID);}

                            // 経過時間が指定の時間を越えていたら話しかける
                            if (chatplusData["greeting"] && past>=chatplusData["greeting"]["time"]) {
                                clearInterval(intervalID);

                                // (担当者不在 || 順番待ち || 他のメッセージが存在)なら話しかけはキャンセル
                                if( !chatplusData["agent"] || chatplusData["status"] == "wait_chat" || (messages && messages.length > 0)) {
                                    return;
                                }

                                chatplusData["status"] = "post_greeting";
                                chatplusData["posted_greeting"] = chatplusData["greeting"]["greeting"];
                                chatplusData["posted_greeting_id"] = chatplusData["greeting"]["id"];

                                self.updateVisitor();
                            }
                        }, 500, {accessTime:jp_chatplus_app_accessTime,greeting:chatplusData["greeting"]});
                    }

					if (!chatplusData["expiration"]) {
						self._ping();
					} else {
						ping_flag = false;
						ping_never = true;
					}

                    // 「一定時間チャットを表示しない」のチェック
                    try {
                        if (window.localStorage) {
                            var suppressed = parseInt(localStorage.getItem('chat-suppressed-until'));
                            if (suppressed) {
                                if (suppressed >= Date.now()) {
                                    // チャット抑制中
                                    jQueryPlus('#chatplusview').hide();
                                } else {
                                    localStorage.removeItem('chat-suppressed-until');
                                }
                            }
                        } else {
                            var suppressed = parseInt(__cp_tracker.getCookie('chat-suppressed-until'));
                            if (suppressed) {
                                if (suppressed >= Date.now()) {
                                    // チャット抑制中
                                    jQueryPlus('#chatplusview').hide();
                                } else {
                                    __cp_tracker.removeCookie('chat-suppressed-until');
                                }
                            }
                        }
                    } catch (e) {}

                    // 訪問者オプション取得
                    //  chatplus側cookieに値があるので,iframe経由で取得して,window.chatplus.optionを更新させる
                    var data = {'type': 'get-visitor-option', 'access_key': access_key};
                    var iframe = document.getElementById("jp.chatplus.app_chat_frame");
                    if (iframe) {
                        iframe.contentWindow.postMessage(data, '*');
                    } else {
                        // iframeが無いのでチャットボタンと見做し,そのドメインのcookieを参照する
                        if (window.chatplus.option === undefined) {window.chatplus.option = {};}
                        var cookie_key_option = 'chatplus_visitor_option' + '_' + access_key;

                        if ((new RegExp("(?:^|;\\s*)" + escape(cookie_key_option).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(window.document.cookie)) {
                            var option_s = unescape(window.document.cookie.replace(new RegExp("(?:^|.*;\\s*)" + escape(cookie_key_option).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*((?:[^;](?!;))*[^;]?).*"), "$1"));
                            window.chatplus.option = JSON.parse(option_s);
                        }
                    }
                    self.trigger('initialized', {});
										self.trigger('Startforce',{});
                }
            })
            .fail(function(){
            });


            self.on('reinit', function(d){
                //___startTime = new Date().getTime();
                pingStartTime = new Date().getTime();
                time_credit_temp = 0;
                self.clearsession();
                self.reinit = true;
						if (!d.reDisplay) {
                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/reinit",
                    method: 'POST',
                    data: {
                          key: access_key + '_' + site_id
                        , visitor_id:chatplusData["customer"]["visitor_id"]
                    }
                })
                .done(function(data){
                    if (data.result==1) {
						if (data.data["ga_events"]) {
							chatplusData["config"]["ga"]["events"]
									= data.data["ga_events"];
						}
						chatplusData['origin_chat_id'] = data.data['chat_id'];
                        chatplusData["status"] = data.data["status"];

						if (data.data["congestion"]) {
							// chatplusData["wait"]["congestion"] = true;
							ping_flag = false;
							ping_never = true;
							clearInterval(pingTimerID);
							time_credit_temp = 0;
							self.clearsession();
							self.trigger('initMessage', {});
							self.updateVisitor();
							return;
						}

						if (chatplusData["status"] == "wait_chat") {
							chatplusData["agent"] = data.data["agent"];
							chatplusData["wait"] = data.data["wait"];
							chatplusData["wait"]["force"] = true;
						}
                        status = "no_chat";
                        self.trigger('initMessage', {});
                        //me.updateVisitor();
						self.updateVisitor();

                        //開始時間
						var st = new Date().getTime();
                        ___startTime = st;
						pingStartTime = st;
						ping_never = false;
                        self.pingReset();
                    }
                })
                .fail(function(){
                });
						} else {
							clearTimeout(pingTimerID);
							ping_flag = false;
							jQueryPlus.ajax({
								url: __cp_d+"/api/chat/reinit",
								method: 'POST',
								data: {
									  key: access_key + '_' + site_id
									, visitor_id:chatplusData["customer"]["visitor_id"]
								}
							})
							.done(function(data){
								if (data.result==1) {
									if (data.data["ga_events"]) {
										chatplusData["config"]["ga"]["events"]
												= data.data["ga_events"];
									}
									chatplusData['origin_chat_id'] = data.data['chat_id'];
									chatplusData["status"] = data.data["status"];

									if (data.data["congestion"]) {
										// chatplusData["wait"]["congestion"] = true;
										ping_flag = false;
										ping_never = true;
										clearInterval(pingTimerID);
										time_credit_temp = 0;
										self.clearsession();
										return;
									}

									if (chatplusData["status"] == "wait_chat") {
										chatplusData["agent"] = data.data["agent"];
										chatplusData["wait"] = data.data["wait"];
										chatplusData["wait"]["force"] = true;
										self.trigger('initMessage', {});
										self.updateVisitor();
										return;
									}
									status = "no_chat";

									//開始時間
									var st = new Date().getTime();
									___startTime = st;
									pingStartTime = st;
									chatplusData["past_chat_id"] = 0;
									chatplusData["past_message_id"] = 0;
									chatplusData["past_message_first"] = 0;
									if (chatplusData["status"] == "no_agent") {
										self.pingReset();
										self.updateVisitor();
									} else {
										jQueryPlus.ajax({
											url: __cp_d+"/api/chat/request",
											method: 'POST',
											data: {
												  key: access_key + '_' + site_id
												, form:d
												, visitor_id:chatplusData["customer"]["visitor_id"]
												, reinit: self.reinit
											}
										})
										.done(function(data){
											if (data.result==1) {
												chatplusData["status"] = data.data["status"];
												chatplusData["wait"] = data.data["wait"];
												if (chatplusData["status"] == "wait_chat" && chatplusData["wait"]) {
													chatplusData["wait"]["force"] = true;
													if (data.data["select"]) {
														chatplusData["wait"]["select"] = true;
													}
												} else if (chatplusData['wait'] && chatplusData['congestion']) {
													ping_flag = false;
													ping_never = true;
													clearInterval(pingTimerID);
													time_credit_temp = 0;
													self.clearsession();
													self.updateVisitor();
													return;
												}

												chatplusData["customer"]["chat_username"] = data.data["customer"]["chat_username"];
												chatplusData["customer"]["chat_company"] = data.data["customer"]["chat_company"];
												chatplusData["customer"]["chat_email"] = data.data["customer"]["chat_email"];
												chatplusData["customer"]["chat_tel"] = data.data["customer"]["chat_tel"];

												chatplusData["past_chat_id"] = data.data["past_chat_id"]
														? data.data["past_chat_id"] : 0;
												chatplusData["past_message_first"] = data.data["past_message_first"]
														? data.data["past_message_first"] : 0;

												self.updateVisitor();
												ping_never = false;
												self.pingReset();
											}
											self.trigger('quickStart');
											self.pingReset();
										})
										.fail(function(){
											self.pingReset();
										});
									}
								}
							})
							.fail(function(){
								self.pingReset();
							});
						}
            });

            self.on("openPreSurvey", function(d){

                //greeting開始状態だったら、ステータスを変更して停止する
                if (chatplusData["greeting"]) {
                    chatplusData["greeting"] = null;
                }
            });

            self.on('requestChat', function(d){
                //___startTime = new Date().getTime();
                pingStartTime = new Date().getTime();
                time_credit_temp = 0;
				chatplusData["past_chat_id"] = 0;
				chatplusData["past_message_id"] = 0;
				chatplusData["past_message_first"] = 0;
                self.clearsession();
				if (d.reinit) {
					self.reinit = true;
				}
                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/request",
                    method: 'POST',
                    data: {
                          key: access_key + '_' + site_id
                        , form:d
                        , visitor_id:chatplusData["customer"]["visitor_id"]
						, reinit: self.reinit
                    }
                })
                .done(function(data){
					if (data.result==1) {
						chatplusData["status"] = data.data["status"];

						chatplusData["customer"]["chat_username"] = data.data["customer"]["chat_username"];
						chatplusData["customer"]["chat_company"] = data.data["customer"]["chat_company"];
						chatplusData["customer"]["chat_email"] = data.data["customer"]["chat_email"];
						chatplusData["customer"]["chat_tel"] = data.data["customer"]["chat_tel"];

						chatplusData["wait"] = data.data["wait"];
						if (data.data['congestion']) {
							chatplusData['wait']['congestion'] = true;
							clearTimeout(pingTimerID);
							ping_never = true;
						} else if (data.data["select"]) {
							chatplusData["wait"]["select"] = true;
						}

						chatplusData["past_chat_id"] = data.data["past_chat_id"]
								? data.data["past_chat_id"] : 0;
						chatplusData["past_message_first"] = data.data["past_message_first"]
								? data.data["past_message_first"] : 0;
                        //chatplusData["messages"] = data.data["messages"];
                        //me.updateVisitor();
						self.updateVisitor();
                        self.pingReset();
                    }
					self.trigger('quickStart');
                })
                .fail(function(){
                });
            });

            self.on("writing", function(d){

                // if (chatplusData["status"]!="in_chat" && chatplusData["status"]!="in_chatbot") {
                //     jQueryPlus.ajax({
                //         url: __cp_d+"/api/chat/request",
                //         method: 'POST',
                //         data: {
                //           key: access_key + '_' + site_id
                //         , messages:d.messages
                //         // , messages:messTxt
                //         , visitor_id:chatplusData["customer"]["visitor_id"]
                //         }
                //     })
                //     .done(function(data){
                //         if (data.result==1) {
                //
                //             //chatplusData["status"] = data.data["status"];
                //             if (data.data["status"] == "in_chat")
                //                 chatplusData["status"] = "in_chat";
                //             else
                //                 chatplusData["status"] = "in_chatbot";
                //             if (data.data["messages"]) {
                //                 var last = chatplus._.last(data.data["messages"]);
                //                 if (last)
                //                     chatplusData["last_message_id"] = last["id"];
                //             }
                //             //me.updateVisitor();
                //             self.updateVisitor();
                //             self.pingReset();
                //         }
                //     })
                //     .fail(function(){
                //     });
                // }

                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/writing",
                    method: 'POST',
                    data: {
                          key: access_key + '_' + site_id
                        , text:d.text
                        , visitor_id:chatplusData["customer"]["visitor_id"]
                    }
                })
                .done(function(data){
                    if (data.result==1) {
                    }
                })
                .fail(function(){
                });
            });

            self.on('quitChat', function(d){
                //___startTime = new Date().getTime();
                pingStartTime = new Date().getTime();
                time_credit_temp = 0;
                self.clearsession();

                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/quit",
                    method: 'POST',
                    data: {
                          key: access_key + '_' + site_id
                        , visitor_id:chatplusData["customer"]["visitor_id"]
                    },
                    'async': !(d['on'] == 'unload' && d['isIE']),
                })
                .done(function(data){
                    if (data.result==1) {
                        chatplus["status"] = data.data["status"];
						chatplusData["status"] = data.data["status"];
                        chatplus["display_when_restart"] = data.data["display_when_restart"];
                        chatplusData["display_when_restart"] = data.data["display_when_restart"];
                        //me.updateVisitor();
						self.updateVisitor();
                        self.pingReset();
                    }
                })
                .fail(function(){
                });

                try {
                    if (window.localStorage) {window.localStorage.removeItem('ga_used');} else {
                        __cp_tracker.removeCookie('ga_used');
                    }
                } catch (e) {console.log(e);}
            });

            self.on('changeStatus', function(d){
                jQueryPlus.ajax({
                        url: __cp_d+"/api/chat/change_status",
                        method: 'POST',
                        data: {
                            key: access_key + '_' + site_id,
                            status: d.status,
                            text: d.text,
                            visitor_id: chatplusData["customer"]["visitor_id"],
                            last_message_id: chatplusData["last_message_id"],
                            bot_referer:d.rule_id? d.rule_id : null,
                            num:d.num? d.num : null
                        }
                    }).done(function(data){
                        chatplusData["status"] = d.status;
                        ___match_clMes_checking = d.text && !data.data["match_clMes"];
                        if (d.status == "no_chat") {
                            self.trigger('initMessage', {});
                            self.clearsession();
                            chatplusUsedChatbots = [];
                        } else if (d.status == "no_agent") {
							chatplusData["change_status"] = true;
							ping_flag = false;
							ping_never = true;
							clearTimeout(pingTimerID);
							time_credit_temp = 0;
							self.clearsession();
							self.updateVisitor();
							jQueryPlus.ajax({
								url: __cp_d+"/api/chat/quit",
								method: 'POST',
								data: {
									  key: access_key + '_' + site_id
									, visitor_id:chatplusData["customer"]["visitor_id"]
								}
							})
							.done(function(data){
							})
							.fail(function(){
							});
						} else {
							chatplusData["status"] = data.data["status"];
							chatplusData["messages"] = data.data["messages"];

							if (chatplusData["status"] == "wait_chat") {
								chatplusData["wait"] = data.data["wait"];
								chatplusData["wait"]["force"] = true;

								if (data.data["select"]) {
									chatplusData["wait"]["select"] = true;
								}
								if (data.data["inChatWaiting"]) {
									chatplusData["wait"]["inChatWaiting"] = true;
								}
							}
							if (data.data['display_when_restart']) {chatplusData['display_when_restart'] = data.data['display_when_restart'];}
							self.updateVisitor();
						}
                        //chatplusData["messages"] = data.data["messages"];
                    }).fail(function(){
                    });
                //開始時間
                //ここの___startTimeはもとからあったのでなのでそのままpingStartTimeではなくそのまま
                ___startTime = new Date().getTime();
                self.pingReset();

            });

			self.on('changeAgent', function(d) {
				var data = {
					key: access_key + '_' + site_id,
					visitor_id: chatplusData["customer"]["visitor_id"],
					mode: d.mode,
					target: d.target,
					status: d.status ? d.status : null,
                    last_message_id: chatplusData["last_message_id"],
                    rule_id:d.rule_id? d.rule_id : null,
                    num:d.num? d.num : null
				}

				if (d.text) {
					self.chatbotpart_ClMes(___chatbotData, ___chatbotDataVisitor);
					pingStartTime = new Date().getTime();

					var pp = document.__cp_p;
					if (pp && typeof pp=="object" ) {
						pp = JSON.stringify(pp);
					}

					data.text = d.text;
					data.start = true;
					data.check_chatbotpart = JSON.stringify(check_chatbotpart_data_temp);
					data.p = pp;
				}

				jQueryPlus.ajax({
					'url': __cp_d+"/api/chat/change_agent",
					'method': 'POST',
					'data': data,
				}).done(function(data){
					if (data.result==1) {
						if (data.data["agent"]) {
							chatplusData["agent"] = data.data["agent"];
						}
						if (data.data["messages"]) {
							chatplusData["messages"] = data.data["messages"];
						}
						___match_clMes_checking = d.text && !data.data["match_clMes"];
						if (data.data["status"]) {
							chatplusData["status"] = data.data["status"];
						}
						if (data.data["wait"]) {
							chatplusData["wait"] = data.data["wait"];
							chatplusData["wait"]["force"] = true;
							if (data.data["inChatWaiting"]) {
								chatplusData["wait"]["inChatWaiting"] = true;
							}
						}
						if (d.text) {
							message_last_chatpart = d.text;
							___last_message_cl = d.text;
							if (ruleaTemp && ruleaTemp.length > 0) {
								check_new_message_flag = true;
							}
						}
						self.updateVisitor();
						self.pingReset();
					}
				}).fail(function(){});
			});

            self.on('sendMessage', function(d){
                self.chatbotpart_ClMes(___chatbotData, ___chatbotDataVisitor);
                pingStartTime = new Date().getTime();
                var s=false;
                if (d.start) s=true;

                var ppf=document.__cp_f;
                var ppp=document.__cp_p;
                var pp = JSON.stringify(jQueryPlus.extend(ppp, ppf));
								var now = new Date().getTime();
								//ページ表示してからの経過時間
								var elapsed = (now  - ___startTime)/1000;
                var data = {
                    key: access_key + '_' + site_id,
                    text:d.text,
                    start:s,
                    no_assign: d.no_assign ? d.no_assign : null,
                    last_message_id:chatplusData["last_message_id"],
                    visitor_id:chatplusData["customer"]["visitor_id"],
                    check_chatbotpart:JSON.stringify(check_chatbotpart_data_temp),
                    p:pp,
                    elapsed:elapsed,
                    rule_id:d.rule_id? d.rule_id : null,
                    num:d.num? d.num : null,
                    customer_tags:customer_tags
                };
                // if (d.events)
                //    data.events = d.events;
                ping_flag = false;
                clearInterval(pingTimerID);

                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/message",
                    method: 'POST',
                    data: data
                })
                .done(function(data){
                    if (data.result==1) {
                        chatplusData["status"] = s? "start_and_message" : data.data["status"];
                        if (data.data["agent"])
                            chatplusData["agent"] = data.data["agent"];
                        chatplusData["messages"] = data.data["messages"];
                        ___match_clMes_checking = d.text && !data.data["match_clMes"];
                        if (data.data["wait"]) {
                            chatplusData["wait"] = data.data["wait"];
                            chatplusData["wait"]["force"] = true;
                            if (chatplusData["status"] == "wait_chat" && chatplusData["wait"]) {
                                if (data.data["select"]) {
                                    chatplusData["wait"]["select"] = true;
                                }

                                if (data.data["inChatWaiting"]) {
                                    chatplusData["wait"]["inChatWaiting"] = true;
                                }
                            }
                        }
                        message_last_chatpart = d.text;
                        ___last_message_cl = d.text;
                        if (ruleaTemp && ruleaTemp.length > 0) {
                            // self.check_chatbotpart(ruleaTemp,chatplusData);
                            check_new_message_flag = true;
                        }
                        self.updateVisitor();
                    }
                    self.pingReset();
                })
                .fail(function(){
                    self.pingReset();
                });
            });

            self.on('receiveMessage', function(d) {
                // 投稿(訪問者・担当者問わず)があったら
                // 担当者入力中取得済みフラグをリセットする(→ping時に取得してwriting_box表示絡みを再度行う)
                received_agent_writing = false;
            });

            self.on("readmessage", function(d){
                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/readmessage",
                    method: 'POST',
                    data: {
                          key: access_key + '_' + site_id
                        , visitor_id:chatplusData["customer"]["visitor_id"]
                    }
                })
                .done(function(data){
                    if (data.result==1) {
                        //console.log("readmessage done");
                    }
                })
                .fail(function(){
                });
                // console.log("readmessage done");
            });


            self.on("createTicket", function(d){
                var message = null;
                if (d.mess_success || d.mess_error) {
                    message = {};
                    message.success = d.mess_success;
                    message.error = d.mess_error;
                    delete d.mess_success;
                    delete d.mess_error;
                }

                //___startTime = new Date().getTime();
                pingStartTime = new Date().getTime();
                d["key"] = access_key + '_' + site_id;
                d["visitor_id"] = chatplusData["customer"]["visitor_id"];
                jQueryPlus.ajax({
                    url: __cp_d+"/admin/api/log/contact",
                    data:d,
                    method: 'POST',
                })
                .done(function(data){									
                  if (message) {
										self.trigger('messageOffForm',{
											result : data.result,
											message : message
										});		
	              	}
                    self.pingReset();
                })
                .fail(function(e){
                    if (message) {
                        jQueryPlus("#chatplusview #body h2").html("");
                        jQueryPlus("#chatplusview .form-horizontal").html(message.error);
                    }
                });
            });

            self.on('formMail', function(d) {
                d['key'] = access_key + '_' + site_id;
                d['visitor_id'] = chatplusData['customer']['visitor_id'];
                jQueryPlus.ajax({
                    'url': __cp_d+'/admin/api/log/formmail',
                    'data': d,
                    'method': 'POST',
                });
            });

            self.on('uploadFile', function(d){
                //___startTime = new Date().getTime();
                pingStartTime = new Date().getTime();
                d.target.upload(
                    //__cp_d+"/admin/api/chat/upload"
                    __cp_d+"/api/chat/upload"
                    //, { chatid: chatplusData.chat_id, key:access_key, data_domain:__c_domain }
                    , {
            		chatid: chatplusData.chat_id,
                        key: access_key + '_' + site_id,
                        text:d.text,
                        last_message_id:chatplusData["last_message_id"],
                        event_type: 31,
                        visitor_id:chatplusData["customer"]["visitor_id"]
                    }
                    , function(res){
                        self.trigger('uploadComplete', d);
                    },"json"
                );
            });

            self.on('dropFile', function(files) {
                var formData = new FormData();
                formData.append('chatid', chatplusData.chat_id);
                formData.append('key', access_key+'_'+site_id);
                formData.append('text', null);
                formData.append('last_message_id', chatplusData["last_message_id"]);
                formData.append('event_type', 31);
                formData.append('visitor_id', chatplusData["customer"]["visitor_id"]);
                Array.prototype.forEach.call(files, function(e) {formData.append('addfile', e);});

                jQueryPlus.ajax({
                    'url': __cp_d+"/api/chat/upload",
                    'method': 'POST',
                    'data': formData,
                    'processData': false,
                    'contentType': false
                }).done(function() {
                });
            });

            self.on('rateGood', function(d){
                //___startTime = new Date().getTime();
                pingStartTime = new Date().getTime();
                jQueryPlus.ajax({
                    url: __cp_d+"/api/rating/chat/g/"+access_key+"/"+chatplusData.chat_id,
                    method: 'POST',
                })
                .done(function(data){
                    self.pingReset();
                })
                .fail(function(){
                    // TODO エラーメッセージを表示する？
                });
            });

            self.on('rateBad', function(d){
                //___startTime = new Date().getTime();
                pingStartTime = new Date().getTime();
                jQueryPlus.ajax({
                    url: __cp_d+"/api/rating/chat/b/"+access_key+"/"+chatplusData.chat_id,
                    method: 'POST',
                })
                .done(function(data){
                    self.pingReset();
                })
                .fail(function(){
                    // TODO エラーメッセージを表示する？
                });
            });

            self.on('feedback', function(d) {
                var data = {
                    'key': access_key + '_' + site_id,
                    'visitor_id': chatplusData["customer"]["visitor_id"],
                    'value': d.value,
                };
                if (d.rate !== null) {data.rate = d.rate;}
                jQueryPlus.ajax({
                    'url': __cp_d+'/api/chat/feedback',
                    'method': 'POST',
                    'data': data,
                }).done(function() {
                }).fail(function() {
                });
            });

            self.on('addVisitorAttribute', function(data, ex) {
                if (ex) {
                    ChatplusAction.addVisitorAttributeEx(access_key, site_id, chatplusData["customer"]["visitor_id"], data.attr, function(e){});
                } else {
                    ChatplusAction.addVisitorAttribute(access_key, site_id, chatplusData["customer"]["visitor_id"], data.attr, function(e){});
                }
            });

            self.on('addVisitorTag', function(data) {
                var tags = chatplus._.isArray(data.value) ? data.value : [data.value];
                ChatplusAction.addVisitorTag(access_key, site_id, chatplusData["customer"]["visitor_id"], tags, function(e){});
            });

            self.on('postback', function(data) {
                data["chat_id"] = chatplusData["chat_id"];
                ChatplusAction.postback(access_key, site_id, chatplusData["customer"]["visitor_id"], data, function(e){});
            });

            self.on('execRule', function(data) {
                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/ruleparts",
                    method: 'POST',
                    data: {
                        key: access_key + '_' + site_id,
                        ids:JSON.stringify([data.id]),
                        visitor_id:chatplusData["customer"]["visitor_id"]
                    }
                }).done(function(data){

                    if (data.result) {
                        if( chatplus._.isArray(data.data.rules) ) {
                            chatplus._.each(data.data.rules, function(rule){

                                if (rule.timer.on=="ruleId") {
                                    rule.timer.on = "rule";
                                    rule.id = rule.id+"_"+new Date().getTime();
                                    ___chatbotData.push(rule);
                                }
                            });
                            ___ruleIdTime = new Date().getTime();
                            clearInterval(chatbotpartId);
                            ___chatbotData = self.sort_chatbotpart(___chatbotData);
                            chatbotpartId = setInterval(self.chatbotpart, 1000, ___chatbotData, data.data.visitor);
                        }
                    }
                }).fail(function(){});
            });

            self.on('submitOption', function(options) {
                if (! window.chatplus) {window.chatplus = {};}
                window.chatplus.option = options;

                jQueryPlus.ajax({
                    url: __cp_d+'/api/chat/option',
                    method: 'POST',
                    dataType: 'json',
                    data: jQueryPlus.param({
                        key: access_key + '_' + site_id,
                        data: options
                    }),
                }).done(function() {
                });
            });

            self.on('suppress', function() {
                if (! window.localStorage) {
                    try {
                        var time = 1440;
                        if (chatplusData["config"]["appearance"]["end"].hasOwnProperty("suppressTime"))
                            time = chatplusData["config"]["appearance"]["end"]["suppressTime"];
                        // 設定時間、このサイトではチャットを表示しない
                        __cp_tracker.setCookie('chat-suppressed-until', Date.now() + (time * 60 * 1000));
                    } catch (e) {}
                    return;
                }
                try {
					var time = 1440;
					if (chatplusData["config"]["appearance"]["end"].hasOwnProperty("suppressTime"))
						time = chatplusData["config"]["appearance"]["end"]["suppressTime"];
                    // 設定時間、このサイトではチャットを表示しない
                    localStorage.setItem('chat-suppressed-until', Date.now() + (time * 60 * 1000));
                } catch (e) {}
            });

			self.on('sendGaEvents', function(data) {
				if (window.ga === undefined || !chatplusData["config"]["ga"] || !chatplusData["config"]["ga"]["events"]) {
					return;
				}

				var chat_id = chatplusData['chat_id'];
				var ga_used = {};
				try {
					if (window.localStorage) {ga_used = JSON.parse(window.localStorage.getItem('ga_used')) || {};} else {
                        ga_used = JSON.parse(__cp_tracker.getCookie('ga_used')) || {};
                    }
				} catch (e) {console.log(e);}
				if (! ga_used[chat_id]) {
					ga_used = {};
					ga_used[chat_id] = {};
				}

				var events = chatplusData["config"]["ga"]["events"];

				var actions = data.actions;

				if (! actions) {return;}
				if (!Array.isArray(actions)) {
					actions = [actions];
				}
				if (actions.length === 0) {return;}

				var ga_tracker = window.ga.getByName('t0');
				if (! ga_tracker) {
					ga_tracker = window.ga.getAll()[0];
					// TODO: デフォルト名でないトラッカーが2個以上あった場合のフォロー
				}

				chatplus._.each(actions, function(action) {
					if (!events[action] || !events[action].active) {return;}
					if (/(^waitChat|^noAgent|First)$/.test(action) && ga_used[chat_id][action]) {return;}

					if (window.gtag) {
						window.gtag('event', action, {'event_category': 'Chatplus', 'event_label': window.location.href, 'value': 1});
					} else {
						// ga('send', hitType, eventCategory, eventAction. eventLabel, ...)
						ga_tracker.send('event', 'Chatplus', action, window.location.href, {'eventValue': 1});
					}
					self.trigger('sendEvent', {'events': action});

					if (/(^waitChat|^noAgent|First)$/.test(action)) {ga_used[chat_id][action] = 1;}
				});

				try {
					if (window.localStorage) {window.localStorage.setItem('ga_used', JSON.stringify(ga_used));} else {
                        __cp_tracker.setCookie('ga_used', JSON.stringify(ga_used));
                    }
				} catch (e) {console.log(e);}
			});

            self.on('gotoURL', function(data){
                if (!data.nomessage) {
                    //メッセージ有りの場合は、messageにチャットボット解析ログを付与するので、
                    //ログ処理を行わない
                    window.open(data.url, data.target);
                    return;
                }
                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/eventlog",
                    method: 'POST',
                    data: {
                        key: access_key + '_' + site_id,
                        url:"",
                        bot_referer:data.rule_id? data.rule_id : null,
                        num:data.num? data.num : null,
                        visitor_id:chatplusData["customer"]["visitor_id"]
                    }
                }).done(function(result){
                }).fail(function(){});
                window.open(data.url, data.target);
            });
            self.on("eventlog", function(data){
                jQueryPlus.ajax({
                    url: __cp_d+"/api/chat/eventlog",
                    method: 'POST',
                    data: {
                        key: access_key + '_' + site_id,
                        bot_referer:data.rule_id? data.rule_id : null,
                        num:data.num? data.num : null,
                        visitor_id:chatplusData["customer"]["visitor_id"]
                    }
                }).done(function(result){
                }).fail(function(){});
            });

			self.on('sendEvent', function(data) {
				var targets = ['GTM'];

				var texts = data.events.split(" ");
				chatplus._.each(texts, function(text) {
					var target = '';
					var firstUnderScore = text.indexOf("_");
					if (firstUnderScore > 0) {
						var t = text.substr(0, firstUnderScore);
						if (chatplus._.contains(targets, t)) {
							target = t;
							text = text.substr(target.length + 1);
						}
					}

					var value = {};
					var firstColons = text.indexOf("::");
					if (firstColons > 0) {
						var json = text.substr(firstColons + 2);
						try {
							value = JSON.parse(json);
						} catch (e) {
							console.log("chatplus json parse error for event");
							value = {};
						}
						text = text.substr(0, firstColons);
					}

					if (target === '' || target === 'GTM') {
						if (! window.dataLayer) {return;}
						value.event = text;
						dataLayer.push(value);
					}
				});
			});

			self.on('chatBeforeunload', function(d){
				//チャットボットの確認
				self.chatbotpart(___chatbotData,___chatbotDataVisitor,true);
				//リードの確認
				var lead_flg = (localStorage)?localStorage.getItem('lead_on_leavepage'):__cp_tracker.getCookie('lead_on_leavepage');
				//var dialogStatus = localStorage.getItem('showLead');

				if((lead_flg && lead_flg !== "null") && !showLead && jQueryPlus('form[name="lead_form"]').length == 0){
					//console.log('visitor_client');
					var hiddenType = (localStorage)?localStorage.getItem('hiddenType'):__cp_tracker.getCookie('hiddenType');
					if (hiddenType==1 && __cp_tracker.getCookie("ever"+__cp_c)=="1") {return;}
					if (hiddenType==2 && __cp_tracker.getCookie("display"+__cp_c)=="1") {return;}
					if (hiddenType==4 && __cp_tracker.getCookie("close"+__cp_c)=="1") {return;}
					var intervalID = window.setInterval(function(tracker){
						showLead = true;
						__cp_tracker.displayLead();
						//表示したことをcookieに保存
						__cp_tracker.setCookie("display"+__cp_c, "1");
						clearInterval(intervalID);
					}, 200, __cp_tracker);
				}
			});

			self.on('pastMessages', function(d) {
				var data = {
					  key: access_key + '_' + site_id
					, visitor_id:chatplusData["customer"]["visitor_id"]
					, chat_id: chatplusData['origin_chat_id']
					, past_chat_id: chatplusData["past_chat_id"]
					, past_message_id: chatplusData["past_message_id"]
					, past_message_first: chatplusData["past_message_first"]
				};
				jQueryPlus.ajax({
					type:"post"
					, url:__cp_d+"/api/chat/pastmessages"
					, data:data
					, success:function(data){
						if (data.result == true) {
							chatplusData["past_message_id"] = data.data.past_message_id;
							self.trigger('showPastMessages', data.data);
						}
					}
				});
			});

        })();
    }
//    var config = document.getElementById("chat_config").textContent;
    config = JSON.parse(config);
    riot.mount('*', config);
